library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_signed.all;

entity alu is 
	port( 	data1: in std_logic_vector (31 downto 0); 
		data2: in std_logic_vector (31 downto 0);
		aluctr: in std_logic_vector (2 downto 0);
		zero: out std_logic;
		alu_result: out std_logic_vector (31 downto 0));
end alu;

architecture behavioral of alu is

signal alu_output: std_logic_vector (31 downto 0);

begin
	zero <= '1' when (alu_output = x"00000000") else '0';
	alu_result <= (x"00000000" & "000" & alu_output(31)) when aluctr = "111" else alu_output;

	process(aluctr, data1, data2)
	begin
		case aluctrl is
			when "000" => alu_output <= data1 and data2;
			when "001" => alu_output <= data1 or data2;
			when "010" => alu_output <= data1 + data2;
			when "110" => alu_output <= data1 - data2;
			when "111" => alu_output <= data1 - data2;
			when others => alu_output <= x"00000000";
		end case;
	end process;
end behavioral;
		
